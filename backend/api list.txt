================================================= User =================================================
// Pengecekkan validasi user ketika login
e.PUT("/user/login", controller.GetUser) // body form-data username & password
/user/login?username=tipani&password=tipaja

// Mengambil semua data user
e.GET("/user", controller.GetAllUser)

// Mengambil semua user berdasarkan role
e.GET("/user/roles/data/:role_id", controller.GetAllUserByRoleID)

// Mengambil semua user berdasarkan user ID
e.GET("/user/:user_id", controller.GetUserByID)

// Mengambil semua user berdasarkan store/warehouse ID
e.GET("/user/store_warehouse/:sw_id", controller.GetUserByStoreWarehouseID)

// Mengambil semua user berdasarkan nama, bukan username
e.GET("/user/name/:user_name", controller.GetUserByName)

// Mengambil data user berdasarkan user dan role
e.GET("/user/:user_id/:role_id", controller.GetDataUser)

// Menambah user baru
e.POST("/user/add", controller.InsertNewUser)
{
    "username": "angieee",
    "user_password": "angieaja",
    "user_fullname": "Keysha",
    "user_address": "Jl. Apajaboleh",
    "user_gender": "P",
    "user_birthdate": "2003-04-04",
    "user_email": "angieaja@gmail.com",
    "user_phone_number": "081000888444"
}

// Update password user
e.PUT("/user/update/:user_id/:password", controller.UpdatePassword)

// Mengambil role user
e.GET("/user/roles/:user_id", controller.GetRoles)

// Menambah role baru untuk user
e.POST("/user/roles/add", controller.InsertNewUserRoles)
{
    "user_id": 3,
    "role_id": 1,
    "store_warehouse_id": 1,
    "custom": 0
}

// Mengubah role untuk user tertentu. Yang di uri role id sebelumnya, yang di body role id setelah
// Kalau custom = 1, harus insert/update userprivilege
e.PUT("/user/roles/update/:user_id/:role_id", controller.UpdateUserRoles)
{
    "role_id": 3,
    "store_warehouse_id": 2,
    "custom": 0
}

// Mengubah lokasi store/warehouse untuk user 
e.PUT("/user/roles/update/:user_id/:role_id/:sw_id", controller.UpdateUserStoreWarehouse)

// Menambah user privilege baru yang sebelumnya tidak ada
e.POST("/user/privileges/add/new/:user_id/:role_id", controller.InsertUserPrivilege)
[
    {
        "privilege_id":4
    }
]

// Menambah privilege baru pada user dan role tertentu yang sebelumnya sudah ada
e.POST("/user/privileges/add/exist/:user_id/:role_id", controller.InsertExistUserPrivilege)
[
    {
        "privilege_id":4
    }
]

// Mengubah privilege. Yang di uri role id sebelumnya, yang di body role id setelah
e.PUT("/user/privileges/update/:user_id/:role_id/:privilege_id", controller.UpdateUserPrivilege)
{
     "privilege_id":4
}

// Mengambil privilege berdasarkan user dan role
e.GET("/user/privileges/:user_id/:role_id", controller.GetPriv)

// Mengirim OTP 
e.PUT("/cashier/session/edit/sendotp/:user_id", controller.AccountSendOTP)

// Verifikasi OTP yang telah dikirimkan
e.PUT("/cashier/session/edit/verifotp/:user_id", controller.OTPVerification)
{
    "user_otp": "107228"
}

================================================= Cashier =================================================

// Session
// Mengambil session berdasarkan ID
e.GET("/cashier/session/:session_id", controller.GetSessionByID)

// Mengambil semua session
e.GET("/cashier/session", controller.GetAllSession)

// Mengambil session terakhir
e.GET("/cashier/session/last", controller.GetLastSession)

// Mengambil transaksi berdasarkan session ID
e.GET("/cashier/session/transaction/:session_id", controller.GetTransactionIDBySessionID)

// Menambah session / membuka session
e.POST("/cashier/session/new", controller.InsertNewSession) 
{
    "user_id": 1,
    "start_time": "2015-09-02 08:04:00",
    "opening_cash":30000,
    "opening_notes" : "Start"
}

// Menutup session
e.PUT("/cashier/session/close/:session_id", controller.UpdateClosingSession)
{
    "end_time": "2024-02-01 11:11:11",
    "total_income": 100000
    "expected_closing_cash": 120000,
    "actual_closing_cash": 110000,
    "actual_difference": 10000, // expected_closing_cash - actual_closing_cash
    "deposit_money": 100000,
    "deposit_difference" : 10000, // actual_closing_cash - deposit_money
    "closing_notes": "Finished"
}

// Update session data. Batas 30 menit setelah close session
e.PUT("/cashier/session/edit/:session_id", controller.UpdateSessionData)
{
    "last_update_time": "2024-01-01 12:11:11",
    "actual_closing_cash": 100000,
    "difference_cash": 30000, // expected_closing_cash - actual_closing_cash
    "deposit_money": 100000,
    "deposit_difference" : 10000 // actual_closing_cash - deposit_money
    "closing_notes": "Finished"
}

// Transaction, Member & Product

// Mengambil member berdasarkan member ID
e.GET("/cashier/members/:member_id", controller.GetMemberByID)

// Mengambil semua data member
e.GET("/cashier/members", controller.GetAllMember)

// Mengambil member berdasarkan nomor telefon
e.GET("/cashier/members/phone_number/:phonenumber", controller.GetMemberByPhoneNumber)

// Menambah member baru
e.POST("/cashier/members/add", controller.InsertNewMember)
{
    "member_name": "Vina",
    "member_phone_number": "081229075436",
    "member_join_date": "2024-08-13 15:56:00"
}

// Mengambil transaksi berdasarkan member ID
e.GET("/cashier/members/transaction/:member_id", controller.GetTransactionIDByMemberID)

// Mengambil transaksi berdasarkan ID
e.GET("/transaction/:transaction_id", controller.GetTransactionByID)

// Mengambil transaksi berdasarkan store ID
e.GET("/transaction/store_warehouse/:sw_id", controller.GetTransactionBySWID)

// Mengambil transaksi terakhir
e.GET("/transaction/last", controller.GetLastTransaction)

// Mengambil semua transaksi
e.GET("/transaction", controller.GetAllTransaction)

// Mengambil data produk transaksi pada transaksi ID tertentu
e.GET("/transaction/detail/:transaction_id", controller.GetTransactionDetailByTransactionID)

// Menambah data produk bada transaksi
e.POST("/transaction/details/add/:user_id/:role_id", controller.InsertTransactionDetails) 
[
    {
        "product_detail_id": 2,
        "promo_product_id": 1,
        "quantity": 2,
        "sell_price": 44000,
        "discount_price": 6600,
        "total_price": 37400,
        "quantity_free": 1
    }, 
    {
        "product_detail_id": 2,
        "promo_product_id": 1,
        "quantity": 2,
        "sell_price": 44000,
        "discount_price": 6600,
        "total_price": 37400
    }
]

// Menambah data transaksi, setelah menambah produk. Kalau ga ada member, member_id = 0
e.PUT("/transaction/update/:transaction_id/:session_id/:member_id", controller.InsertTransaction)
{
    "transaction_timestamp": "2024-06-06 11:11:11",
    "transaction_payment_method_id": 2,
    "transaction_payment": 50000,
    "transaction_change": 6000,
    "member_point_in": 50,
    "member_point_out": -500
}

// Menerima (accept) surat jalan
e.PUT("/store/orders/delivery/accept/:deliveryorder_id/:user_id", controller.AcceptDeliveryOrders)

================================================= Warehouse =================================================
// Menambah data stock card baru
e.POST("/products/stock/card/add", controller.InsertStockCards)
[
    {
        "product_detail_id": 3,
        "stock_description": "Purchase",
        "product_batch": 2,
        "expired_date": "2025-08-20",
        "stock_in": 30,
        "store_warehouse_id": 2
    }
]

// Mengambil data stock card berdasarkan stock card ID
e.GET("/products/stock/card/:stock_card_id", controller.GetStockCardByID)

// Mengambil data stock card berdasarkan produk ID
e.GET("/products/stock/card/product/:product_id", controller.GetStockCardByProductID)

// Mengambil data stock card berdasarkan store/warehouse tertentu
e.GET("/products/stock/card/product/store_warehouse/:storewarehouse_id", controller.GetStockCardByStoreWarehouse)

// Mengambil data stock card berdasarkan product ID dan  store/warehouse tertentu
e.GET("/products/stock/card/product/store_warehouse/:product_id/:storewarehouse_id", controller.GetStockCardByPIDStoreWarehouse)

// Mengambil data stock card berdasarkan store/warehouse pada exp date tertentu
e.GET("/products/stock/card/product/store_warehouse/exp/:exp_date/:storewarehouse_id", controller.GetStockCardByStoreWarehouseEXPDate)

// Mengambil data stock card berdasarkan store/warehouse pada batch tertentu
e.GET("/products/stock/card/product/store_warehouse/batch/:batch/:storewarehouse_id", controller.GetStockCardByStoreWarehouseBatch)

// Mengambil data stock card berdasarkan produk pada exp date tertentu
e.GET("/products/stock/card/product/:product_id/:exp_date", controller.GetStockCardByEXPDate)

// Mengambil exp date yang paling dekat pada produk tertentu
e.GET("/products/stock/card/product/exp/early/:product_id/:sw_id", controller.GetEarliestEXPByProductID)

// Mengambil total stok berdasarkan produk id
e.GET("products/stock/card/product/total_stock/all/:product_id", controller.GetTotalStockByProductID)

// Mengambil total stok berdasarkan produk id store/warehouse tertentu
e.GET("products/stock/card/product/total_stock/:product_id/:sw_id", controller.GetTotalStockByProductIDSWID)

// Mengambil total stok berdasarkan exp date dan store/warehouse tertentu
e.GET("/products/stock/card/product/total_stock/batch/:sw_id/:batch", controller.GetTotalStockByBatchSWID)

// Mengambil total stok berdasarkan batch, produk id, dan store/warehouse tertentu
e.GET("/products/stock/card/product/total_stock/batch/:product_id/:sw_id/:batch", controller.GetTotalStockByBatchPIDSWID)

// Mengambil total stok berdasarkan exp date, produk id, dan store/warehouse tertentu
e.GET("/products/stock/card/product/total_stock/:product_id/:sw_id/:exp_date", controller.GetTotalStockByEXPPIDSWID)

// Mengambil list expdate pada produk tertentu
e.GET("/products/stock/card/exp_date/:product_id", controller.GetAllEXPDateByProductID)

// Mengambil list expdate pada produk tertentu dan store/warehouse tertentu
e.GET("/products/stock/card/exp_date/:product_id/:sw_id", controller.GetAllEXPDateByProductIDSWID)

// Mengambil list batch pada produk tertentu
e.GET("/products/stock/card/batch/:product_id", controller.GetAllBatchByProductID)

// Mengambil list batch pada produk tertentu dan store/warehouse tertentu
e.GET("/products/stock/card/batch/:product_id/:sw_id", controller.GetAllBatchByProductIDSWID)

// Mengambil minimal stok pada produk tertentu pada store/warehouse tertentu
e.GET("/products/stock/min/:product_id/:store_warehouse_id", controller.CheckMinStock)

// Mengambil semua data produk untuk tampilan di table stock opname (tanpa actual stock)
e.GET("/products/stock/opname/data", controller.GetDataforStockOpname)

// Mengambil semua data produk pada store/warehouse tertentu untuk tampilan di table stock opname (tanpa actual stock)
e.GET("/products/stock/opname/data/store_warehouse/:sw_id", controller.GetDataforStockOpnameBySWID)

// Mengambil semua data produk pada produk tertentu dan store/warehouse tertentu untuk tampilan di table stock opname (tanpa actual stock)
e.GET("/products/stock/opname/data/store_warehouse/:product_id/:sw_id", controller.GetDataforStockOpnameByPIDSWID)

// Mengambil semua data stock opname pada store/warehouse tertentu
e.GET("/products/stock/opname/store_warehouse/:sw_id", controller.GetStockOpnameBySWID)

// Mengambil semua data stock opname
e.GET("/products/stock/opname", controller.GetAllStockOpname)

// Menambah stock opname
e.POST("/products/stock/opname/add", controller.InsertStockOpname)
[
    {
        "product_detail_id": 4,
        "batch": "1",
        "expired_date": "2025-08-25",
        "actual_stock": 15,
        "unit_type": "gram",
        "store_warehouse_id": 2
    }
]

// Transfer Notes
// Mengambil transfer note berdasarkan ID
e.GET("/orders/transfer/notes/:transfernote_id", controller.GetTransferNoteByID)

// Mengambil transfer note terakhir
e.GET("/orders/transfer/notes/last", controller.GetLastTransferNote)

// Mengambil semua transfer note
e.GET("/orders/transfer/notes/all", controller.GetAllTransferNotes)

// Mengambil sisa stok dari suatu produk dalam suatu transfer note yang belum dikirimkan
e.GET("/orders/transer/notes/stock/left/:product_id/:transfernote_id", controller.GetStockLeftInTransferNotes)

// Mengambil data produk dalam suatu transfer notes
e.GET("/orders/transfer/notes/detail/:transfernote_id", controller.GetTransferNoteDetailByTNID)

// Menambahkan produk pada suatu transfer note
e.POST("/orders/transfer/notes/add/:user_id/:role_id", controller.InsertTransferNoteDetails) 
[
    {
        "product_detail_id": 4,
        "quantity": 5,
        "expired_date" : "2025-08-25",
        "batch": "1"
    }
]

// Menambah detail transfer InsertTransferNotes, setelah menambah semua produk
e.PUT("/orders/transfer/notes/update/:transfernote_id", controller.InsertTransferNotes)
{
    "store_warehouse_to": 1,
    "user_id_from": 3
}

// Cek jumlah produk untuk tiap batch & expdate
e.GET("/orders/transfer/notes/check/:product_id/:sw_id/:quantity", controller.GetCheckProductForTransferNote)


// Delivery Order
// Mengambil data surat jalan berdasarkan ID
e.GET("/orders/delivery/:delivery_order_id", controller.GetDeliveryOrderByID)

// Mengambil data surat jalan terakhir
e.GET("/orders/delivery/last", controller.GetLastDeliveryOrder)

// Mengambil data surat jalan berdasarkan asal pengiriman
e.GET("/orders/delivery/warehouse/:sw_from_id", controller.GetDeliveryOrderBySWFromID)

// Mengambil data surat jalan berdasarkan asal dan tujuan pengiriman
e.GET("/orders/delivery/storewarehouse/:sw_from_id/:sw_to_id", controller.GetDOFromSWIDToSWID)

// Mengambil data surat jalan berdasarkan ID transfer note
e.GET("/orders/delivery/transfernote/:transfernote_id", controller.GetDeliveryOrderByTNID)

// Mengambil produk dalam surat jalan berdasarkan ID surat jalan
e.GET("/orders/delivery/detail/:delivery_order_id", controller.GetDeliveryOrderDetailByDOID)

// Menambah produk pada suatu surat jalan
e.POST("/orders/delivery/add/:transfernote_id", controller.InsertDeliveryOrderDetails) 
[
    {
        "product_detail_id": 4,
        "quantity": 5,
        "expired_date" : "2024-08-20",
        "batch": 1
    }
]

// Menambah detail surat jalan, setelah menambah semua produk
e.PUT("/orders/delivery/update/:deliveryorder_id", controller.InsertDeliveryOrders)
{
    "user_id_from": 3
}

// Mengambil semua add product
e.GET("/orders/supplier/all", controller.GetAllAddStock)

// Mengambil add product pada ID tertentu
e.GET("/orders/supplier/:addstock_id", controller.GetAddStockByID)

// Mengambil semua add product detail pada add product ID tertentu
e.GET("/orders/supplier/detail/:addstock_id", controller.GetAddStockDetailByASID)

// Menambah produk pada suatu add product
e.POST("/orders/supplier/add/:user_id/:role_id", controller.InsertAddStockDetails)
[
    {
        "product_detail_id":13,
        "batch": "3",
        "expired_date": "2025-09-11",
        "quantity": 500,
        "section_placement": "A13"
    },
    {
        "product_detail_id":14,
        "batch": "3",
        "expired_date": "2025-09-12",
        "quantity": 50,
        "section_placement": "A14"
    }
]

// Menambah detail add product, setelah menambah semua produk
e.PUT("/orders/supplier/update/:addstock_id", controller.InsertAddStock)
{
    "delivery_order_supplier":"00123",
    "supplier_id": 1
}

// Mengambil semua data stock produk yang dikurangi
e.GET("/products/stock/subtract/all", controller.GetAllSubtractStock)

// Mengambil semua data stock produk yang dikurangi berdasarkan store/warehouse id
e.GET("/products/stock/subtract/:sw_id", controller.GetSubtractStockBySWID)

// Menambah subtract product baru
e.POST("/products/stock/subtract/:user_id/:role_id", controller.InsertSubtractStock)
[
    {
        "product_detail_id": 4,
        "batch": "1",
        "subtract_quantity": 1,
        "expired_date": "2025-08-25"
        "notes": "Dimakan tikus pak bos"
    }
]

================================================= Admin =================================================
// Mengambil data session berdasarkan store ID
e.GET("/sessions/store_warehouse/:sw_id", controller.GetSessionBySWID)

// Mengambil data yang belum diverifikasi dan actual closing cash != 0
e.GET("/sessions/not_verified", controller.GetNotVerifiedSession)

// Verifikasi Session
e.PUT("/sessions/verify/:session_id", controller.VerifySession)

// Menambah kategori produk baru
e.POST("/products/category/add", controller.InsertProductCategory)
[
    {
        "product_category_name": "Meats"
    }, 
    {
        "product_category_name": "Fruits"
    }
]

// Mengambil data produk berdasarkan ID produk
e.GET("/products/:product_id/:user_id/:role_id", controller.GetProductByID) 

// Mengambil data produk berdasarkan kode produk
e.GET("/products/code/:product_code/:user_id/:role_id", controller.GetProductByCode)

// Mengambil data produk berdasarkan nama
e.GET("/products/name/:product_name/:user_id/:role_id", controller.GetProductByName) 

// Mengambil semua data produk beserta stok, exp, batch per store warehouse
e.GET("/products", controller.GetAllProducts) 

// Mengambil semua data produk, tanpa stok, exp, batch
e.GET("/products/detail", controller.GetAllProductDetail)  

// Mengambil semua produk dari supplier tertentu, tanpa stok, exp, batch
e.GET("/products/supplier/:supplier_id", controller.GetAllProductDetailFromSupplier) 

// Mengambil data produk berdasarkan lokasi store/warehouse user
e.GET("/products/store_warehouse/:user_id/:role_id", controller.GetAllProductsInStoreWarehouse) 

// Menambah produk baru
e.POST("/products/add/:store_warehouse_id", controller.InsertProductDetails)
[
    {
        "product_code": "VEG0015",
        "product_category_id": 1,
        "product_name": "Peas",
        "supplier_id": 1,
        "buy_price": 20000,
        "sell_price": 22000,
        "min_stock": 500,
        "product_unit": "gram"
    }
]

// Menambah jenis promo baru
e.POST("/promos/type/add", controller.InsertPromoType)
[
    {
        "promo_type_name": "BUY1GET1"
    },
    {
        "promo_type_name": "%DISCOUNT"
    }
]

// Mengambil promo berdasarkan ID
e.GET("/promos/:promo_id", controller.GetPromoByID)

// Mengambil semua promo yang tersedia
e.GET("/promos", controller.GetAllPromos)  

// Mengambil semua promo yang masih aktif
e.GET("/promos/active", controller.GetAllActivePromos)

// Menambah promo baru
e.POST("/promos/add", controller.InsertPromos)
[
    {
        "promo_code": "PROMO01",
        "promo_type_id": 2,
        "promo_start_date": "2024-08-16",
        "promo_end_date": "2024-09-16",
        "promo_percentage": 15,
        "promo_term_and_cond": "Min Buy: Rp 30,000"
    }
]

// Mengambil promo pada produk tertentu
e.GET("/promos/product/:product_id", controller.GetPromoIDByProductID)

// Menambah promo untuk produk tertentu
e.POST("promos/product/add", controller.InsertPromoProducts)
[
    {
        "product_detail_id": 2,
        "promo_id" :2
    },
    {
        "product_detail_id": 3,
        "promo_id" :2
    }
]

// Menerapkan promo untuk semua produk
e.POST("/promos/product/all/:promo_id", controller.UpdatePromoToAllProducts)

// Mengambil role berdasarkan id
e.GET("/roles/:roles_id", controller.GetRolesByID)

// Mengambil privilege berdasarkan id
e.GET("/privileges/:priv_id", controller.GetPrivilegesByID)

// Mengambil surat jalan yang  belum diverify
e.GET("/orders/transfer/notes/not_verified", controller.GetNotVerifiedTransferNote)

// Verify deliver order
e.PUT("/orders/transfer/notes/verify/:transfernote_id", controller.VerifyTransferNotes)

// Menambah produk untuk suatu tranfer note
e.POST("/orders/transfer/detail/add/product/:transfernote_id", controller.InsertProductToTransferNoteDetails) 
[
    {
        "product_detail_id": 13,
        "quantity": 5,
        "expired_date" : "2025-09-11",
        "batch": "3"
    }
]

// Mengganti kuantitas produk pada suatu transfer note
e.PUT("/orders/transfer/detail/update/product/:transfernote_id/:product_id/:quantity", controller.UpdateProductQtyTransferNote)

// Menghapus produk di suatu tranfer note 
e.DELETE("/orders/transfer/detail/delete/product/:transfernote_id/:product_id", controller.DelProductFromTransferNote)

// Mengambil add stock yang belum diverify
e.GET("/orders/supplier/not_verified", controller.GetNotVerifiedAddStock)

// Verify add product dari warehouse
e.PUT("/orders/supplier/verify/:addstock_id", controller.VerifyAddStock)

// Mengambil subtract stock yang belum diverify
e.GET("/products/stock/subtract/not_verified", controller.GetNotVerifiedSubtractStock)

// Verify subtract product dari warehouse
e.PUT("/products/stock/subtract/verify/:subtract_id", controller.VerifySubtractStock)

================================================= Owner =================================================
// Mengambil semua store/warehouse
e.GET("/store_warehouses/all", controller.GetAllStoreWarehouse)

// Mengambil semua store atau warehouse. sw_type = store / warehouse
e.GET("/store_warehouses/type/:sw_type", controller.GetAllByStoreWarehouseType)

// Mengambil data store/warehouse berdasarkan user dan role user yang sedang login
e.GET("/store_warehouses/:user_id/:role_id", controller.GetStoreWarehouseByUIDRID)

// Mengambil data store/warehouse berdasarkan id
e.GET("/store_warehouses/:store_warehouse_id", controller.GetStoreWarehouseByID)

// Mengambil data store/warehouse berdasarkan nama
e.GET("/store_warehouses/name/:sw_name", controller.GetStoreWarehouseByName)

// Menambah data store/warehouse baru
e.POST("/store_warehouses/add", controller.InsertStoreWarehouse)
{
    "store_warehouse_type": "STORE", // STORE || WAREHOUSE
    "store_warehouse_name": "Toko ABC",
    "store_warehouse_address": "Jl. Jeruk Busuk No. 0, Surabaya",
    "store_warehouse_phone_number": "081555666888"
}

// Menambah role baru
e.POST("/owner/roles/add", controller.InsertRoles)
[
    {
        "roles_name": "Owner"
    }
]

// Menambah privilege baru
e.POST("/privileges/add", controller.InsertPrivileges)
[
    {
        "privileges_name": "Do Something",
        "Navbar" : 1
    }
]

// Menambah privilege untuk role default
e.POST("/owner/roles/default/add", controller.InsertRolesDefault)
[
    {
        "roles_id": 6,
        "privileges_id": 1
    }
]

// Mengambil data supplier berdasarkan ID
e.GET("/suppliers/:supplier_id", controller.GetSupplierByID)

// Mengambil semua supplier
e.GET("/suppliers/all", controller.GetAllSupplier)

// Menambah supplier baru
e.POST("suppliers/add", controller.InsertSupplier)
{
    "supplier_name": "Rumah Tani",
    "supplier_phone_number": "081237485623",
    "supplier_address": "Jl. Semangka II No. 3, Surabaya"
}

// Mengambil data jenis pembayaran yang tersedia
e.GET("/payment/method", controller.GetAllPaymentMethod)

// Menambah jenis pembayaran baru
e.POST("/payment/method/add", controller.InsertPaymentMethod)
[
    {
        "payment_method_name": "Cash"
    }
]

// Mengambil barang fast/slow moving dari jumlah barang di transaksi
// order 0 - fast; 1 - slow; 
// year month day kalau tidak spesifik tulis 0. Misal ambil di Agustus 2024 jadi 2024/08/0
// Kalau ambil semua tanpa filter tanggal, jadi 0/0/0. BERLAKU UNTUK BAWAH NYA JUGA
e.GET("/products/moving/transaction/:order/:year/:month/:day", controller.GetSlowFastMovingByAllTransaction)

// Mengambil barang fast/slow moving dari jumlah barang di transaksi berdasarkan range tanggal
// /products/moving/transaction/range/0/2024-08-20/2024-08-22
e.GET("/products/moving/transaction/range/:order/:start_date/:end_date", controller.GetSlowFastMovingFromTransactionByDateRange)

// Mengambil barang fast/slow moving dari jumlah barang di transaksi pada store tertentu
// order 0 - fast; 1 - slow; 
e.GET("/products/moving/transaction/:order/:sw_id/:year/:month/:day", controller.GetSlowFastMovingFromTransactionBySWID)

// Mengambil barang fast/slow moving dari jumlah barang di transaksi pada store tertentu berdasarkan range tanggal
// /products/moving/transaction/range/0/1/2024-08-20/2024-08-22
e.GET("/products/moving/transaction/range/:order/:sw_id/:start_date/:end_date", controller.GetSlowFastMovingFromTransactionBySWIDDateRange)

// Mengambil barang fast/slow moving dari jumlah barang di stock out stock cards
// order 0 - fast; 1 - slow; 
e.GET("/products/moving/stock/card/:order", controller.GetSlowFastMovingFromStockOut)

// Mengambil semua total promo cost 
e.GET("/promos/cost/all", controller.GetTotalPromoCost)

// Mengambil total promo cost per transaksi semua store
// ex. transaksi 1 : 10000; transaksi 2 : 15000
e.GET("/promos/cost/transaction/all", controller.GetTotalPromoCostPerTransaction)

// Mengambil total promo cost dari transaksi tertentu
e.GET("/promos/cost/transaction/:transaction_id", controller.GetTotalPromoCostByTransactionID)

// Mengambil total promo cost per store
// ex. store 1 : 10000; store 2 : 15000
e.GET("/promos/cost/store/all", controller.GetTotalPromoCostPerStore)

// Mengambil total promo cost dari store tertentu
e.GET("/promos/cost/store/:store_id", controller.GetTotalPromoCostByStoreID)

// Mengambil semua data notifikasi
e.GET("/notifications", controller.GetAllNotification)

// Mengambil notifikasi berdasarkan role
e.GET("/notifications/:role_id", controller.GetNotificationByRoleId)

// Menambah notifikasi baru
e.POST("/notifications/add", controller.InsertNotification)
{
    "user_id": 1,
    "roles_id": 1,
    "description": "Transaksi baru bos",
    "notification_type_id": 11
}